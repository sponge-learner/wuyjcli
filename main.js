#!/usr/bin/env node
import e from "chalk"; import t from "inquirer"; import { readdirSync as o, existsSync as n } from "fs"; import { exec as i } from "child_process"; import a from "path"; import s from "shelljs"; import c from "ora"; import l from "process"; async function r(n) { log(e.green("开始拉取模板...")); const l = [{ type: "list", message: "请选择项目类型", name: "template", choices: o(a.join(__dirname, "template")) }]; try { const { template: o } = await t.prompt(l); if (o) { let l = a.join(__dirname, "template", o); s.cp("-R", l + "/", n), c().succeed(e.green(`拉取 '${o}' 项目成功！`)), s.cd(n), c().info(e.yellow("设置淘宝镜像源 --- npm config set registry http://registry.npm.taobao.org")), s.exec("npm config set registry http://registry.npm.taobao.org"); const r = [{ type: "confirm", name: "isInstall", message: "是否安装依赖（node_modules）?", default: !1 }]; let { isInstall: m } = await t.prompt(r); if (m) { log("安装模块 --- npm install"), c().info(`${e.yellow("安装耗时可能会很长，请耐心等待，您也可以通过 ctrl+c停止安装， 手动 npm install")}`); const t = c(`${e.blue("安装依赖中")}`); t.start(), i("npm install", { encoding: "utf- 8" }, (function (e, t, o) { e && console.log(e) })).on("exit", (function (e) { t.succeed("模块安装完成"), s.exec("npm start"), t.succeed("项目启动成功"), process.exit() })) } else process.exit() } } catch (t) { log(e.red("createProject错误:", t)) } } function m(e) { c().info("功能开发中。。。"), l.exit() } function p(e) { return new Promise(((t, o) => { i(e, (function (e, o) { e && t([e, null]) })).on("exit", (e => { t([null, e]) })) })) } async function g(e) { const o = { gitee: "https://gitee.com/w992133722/react-ts.git" }; let { gitType: n } = await t.prompt([{ type: "list", message: "请选择镜像源（国内建议选择gitee）", name: "gitType", choices: ["git", "gitee"] }]); if (o[n]) { let i = c("正在克隆仓库"); i.start(); let [a, l] = await p(`git clone ${o[n]} ${e}`); a ? console.log("仓库克隆错误:", a) : (i.succeed("仓库克隆成功"), s.cd(e), await async function (e) { const o = [{ type: "confirm", name: "isInstall", message: "是否安装依赖（node_modules）?", default: !1 }]; let { isInstall: n } = await t.prompt(o); if (n) { let e = c("依赖安装中"); e.start(); let [t, o] = await p("npm install"); if (e.stop(), t) return console.log("依赖安装错误"); e.succeed("依赖安装成功") } }()) } else c().fail("镜像资源正在开发中") } function f() { c().info(e.yellow("模板更新功能开发中")) } global.__dirname = a.resolve(), global.log = console.log, log(e.green.bold("欢迎使用")), async function () { log(e.green.bold("开始构建项目")); const o = [{ type: "input", message: "请输入项目名称", name: "name" }, { type: "list", message: "选择项目类型", name: "projectType", choices: ["template", "custom", "git", "updateTemplate"] }]; let i = { template: r, custom: m, git: g, updateTemplate: f }; try { let { projectType: a, name: r } = await t.prompt(o), m = l.cwd(); s.cd(m), await async function (o) { if (n(o)) { c().warn(e.red(`目录下已存在${o}文件夹`)); var i = [{ type: "confirm", name: "isRemoveDir", message: `是否删除 ${o} ?`, default: !1 }]; try { const { isRemoveDir: n } = await t.prompt(i); n ? (s.rm("-rf", o), c().succeed(e.green(e.green(`删除 ${o}成功`)))) : (c().fail(e.red("项目构建失败")), l.exit()) } catch (t) { log(e.red("createProject错误:", t)) } } }(r), i?.[a]?.() } catch (t) { log(e.red("createProject错误:", t)) } }();
